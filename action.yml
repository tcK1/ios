name: "Remote Build - iOS"
description: "Github implementation of the RNEF Remote Build for iOS"

branding:
  icon: "box"
  color: "blue"

inputs:
  github-token:
    description: GitHub Token
    required: true
  working-directory:
    description: "Working directory for the build command"
    required: false
    default: "."
  destination:
    description: 'Destination to build to: "simulator" or "device". Using "device" runs "rnef build:ios --archive" and code signing settings (certificate, provisioning profile, keychain password) are required.'
    required: true
    default: "simulator" # 'simulator' or 'device'
  scheme:
    description: Xcode scheme
    required: true
  configuration:
    description: Xcode configuration
    required: true
  re-sign:
    description: Re-sign IPA with new JS bundle. No signing is done for APP bundle (destination == simulator).
    required: false
  certificate-base64:
    description: "[Device Builds] Base64 encoded P12 file containing Apple certificate (incl. private key)"
    required: false
  certificate-password:
    description: "[Device Builds] Password for the P12 file containing the Apple certificate"
    required: false
  provisioning-profile-base64:
    description: "[Device Builds] Base64 encoded Apple provisioning profile (*.mobileprovision)"
    required: false
  provisioning-profile-name:
    description: "[Device Builds] Name of the Apple provisioning profile (without .mobileprovision extension)"
    required: false
  keychain-password:
    description: "[Device Builds] Password that will protect temporary keychain used for signing (can be a random string)"
    required: false
  rnef-build-extra-params:
    description: 'Extra parameters to pass to "rnef build:ios"'
    required: false
  comment-bot:
    description: "Whether to send a comment under PR with the link to the generated build"
    required: false
    default: true

outputs:
  artifact-url:
    description: "URL of the relevant iOS build artifact (could be cached)"
    value: ${{ steps.upload-artifact.outputs.artifact-url || env.ARTIFACT_URL }}
  artifact-id:
    description: "ID of the relevant iOS build artifact (could be cached)"
    value: ${{ steps.upload-artifact.outputs.artifact-id || env.ARTIFACT_ID }}

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      run: |
        if [ "${{ inputs.destination }}" != "simulator" ] && [ "${{ inputs.destination }}" != "device" ]; then
          echo "Invalid input 'destination': '${{ inputs.destination }}'. Allowed values: 'simulator' or 'device'."
          exit 1
        fi

        if [ "${{ inputs.destination }}" == "device" ] && [ "${{ inputs.skip-sign }}" == "false" ]; then
          if [ -z "${{ inputs.certificate-base64 }}" ]; then
            echo "Input 'certificate-base64' is required for device builds."
            exit 1
          fi

          if [ -z "${{ inputs.certificate-password }}" ]; then
            echo "  Input 'certificate-password' is required for device builds."
            exit 1
          fi

          if [ -z "${{ inputs.provisioning-profile-base64 }}" ]; then
            echo "Input 'provisioning-profile-base64' is required for device builds."
            exit 1
          fi

          if [ -z "${{ inputs.provisioning-profile-name }}" ]; then
            echo "Input 'provisioning-profile-name' is required for device builds."
            exit 1
          fi

          if [ -z "${{ inputs.keychain-password }}" ]; then
            echo "Input 'keychain-password' is required for device builds."
            exit 1
          fi
        fi
      shell: bash

    - name: Native Fingerprint
      id: fingerprint
      run: |
        FINGERPRINT_OUTPUT=$(npx rnef fingerprint -p ios --raw)
        echo "FINGERPRINT=$FINGERPRINT_OUTPUT" >> $GITHUB_ENV
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Get Provider Name
      run: |
        PROVIDER_NAME=$(npx rnef remote-cache get-provider-name)
        echo "PROVIDER_NAME=$PROVIDER_NAME" >> $GITHUB_ENV
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Populate GitHub Token in Cache
      if: ${{ env.PROVIDER_NAME == 'GitHub' }}
      run: |
        mkdir -p .rnef/cache
        echo "{\"githubToken\": \"${{ inputs.github-token }}\"}" > .rnef/cache/project.json
      shell: bash

    # We create PR-related artifacts to avoid overwriting the main artifact with new JS bundle
    - name: Check if PR-related artifact exists
      if: ${{ github.event_name == 'pull_request' && inputs.re-sign == 'true' }}
      run: |
        ARTIFACT_TRAITS="${{ inputs.destination }},${{ inputs.configuration }},${{ github.event.pull_request.number}}"
        echo "ARTIFACT_TRAITS=$ARTIFACT_TRAITS" >> $GITHUB_ENV

        OUTPUT=$(npx rnef remote-cache list -p ios --traits "${ARTIFACT_TRAITS}" --json)
        if [ "$OUTPUT" ]; then
          echo "ARTIFACT_URL=$(echo "$OUTPUT" | jq -r '.url')" >> $GITHUB_ENV
          echo "ARTIFACT_ID=$(echo "$OUTPUT" | jq -r '.id')" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$(echo "$OUTPUT" | jq -r '.name')" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Check if regular artifact exists
      if: ${{ !env.ARTIFACT_NAME }}
      run: |
        ARTIFACT_TRAITS="${{ inputs.destination }},${{ inputs.configuration }}"
        echo "ARTIFACT_TRAITS=$ARTIFACT_TRAITS" >> $GITHUB_ENV

        OUTPUT=$(npx rnef remote-cache list -p ios --traits "${ARTIFACT_TRAITS}" --json)
        if [ "$OUTPUT" ]; then
          echo "ARTIFACT_URL=$(echo "$OUTPUT" | jq -r '.url')" >> $GITHUB_ENV
          echo "ARTIFACT_ID=$(echo "$OUTPUT" | jq -r '.id')" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$(echo "$OUTPUT" | jq -r '.name')" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Set Artifact Name (if not set)
      if: ${{ !env.ARTIFACT_NAME }}
      run: |
        # Transform commas to hyphens
        ARTIFACT_TRAITS_HYPHENATED=$(echo "$ARTIFACT_TRAITS" | tr ',' '-')
        ARTIFACT_TRAITS_HYPHENATED_FINGERPRINT="${ARTIFACT_TRAITS_HYPHENATED}-${FINGERPRINT}"
        echo "ARTIFACT_NAME=rnef-ios-${ARTIFACT_TRAITS_HYPHENATED_FINGERPRINT}" >> $GITHUB_ENV
      shell: bash

    - name: Set Provisioning Profile Path
      run: |
        echo "PROFILE_DIR=$HOME/Library/MobileDevice/Provisioning Profiles" >> $GITHUB_ENV
      shell: bash

    - name: Setup Code Signing (device builds only)
      if: ${{ inputs.re-sign == 'true' && inputs.destination == 'device' || (!env.ARTIFACT_URL && inputs.destination == 'device') }}
      run: |
        # Create temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        security create-keychain -p "${{ inputs.keychain-password }}" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "${{ inputs.keychain-password }}" $KEYCHAIN_PATH

        # Import certificate to keychain
        CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12

        echo -n "${{ inputs.certificate-base64 }}" | base64 --decode -o $CERTIFICATE_PATH
        security import $CERTIFICATE_PATH -P "${{ inputs.certificate-password }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "${{ inputs.keychain-password }}" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Infer certificate identity
        IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep -oE '([0-9A-F]{40})' | head -n 1)
        echo "Certificate identity: $IDENTITY"
        echo "IDENTITY=$IDENTITY" >> $GITHUB_ENV

        # Unpack provisioning profile
        PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
        PROFILE_PATH="$PROFILE_DIR/${{ inputs.provisioning-profile-name }}.mobileprovision"

        mkdir -p "$PROFILE_DIR"
        echo -n "${{ inputs.provisioning-profile-base64 }}" | base64 --decode -o "$PROFILE_PATH"
      shell: bash

    - name: Determine iOS sourceDir
      if: ${{ !env.ARTIFACT_URL }}
      run: |
        JSON_OUTPUT=$(npx rnef config -p ios)
        echo "$JSON_OUTPUT" | jq -r '.project'
        IOS_SOURCE_DIR=$(echo "$JSON_OUTPUT" | jq -r '.project.ios.sourceDir')
        echo "IOS_SOURCE_DIR=$IOS_SOURCE_DIR" >> $GITHUB_ENV
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Build iOS
      if: ${{ !env.ARTIFACT_URL }}
      run: |
        npx rnef build:ios \
          ${{ inputs.destination == 'device' && '--archive' || '' }} \
          --scheme "${{ inputs.scheme }}" \
          --configuration "${{ inputs.configuration }}" \
          --build-folder build \
          --destination ${{ inputs.destination }} \
          ${{ inputs.rnef-build-extra-params }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Find Build Artifact
      if: ${{ !env.ARTIFACT_URL }}
      run: |
        if [ "${{ inputs.destination }}" == "device" ]; then
          IPA_PATH=$(find .rnef/cache/ios/export -maxdepth 1 -name '*.ipa' -type f | head -1)
          echo IPA_PATH $IPA_PATH
          echo "ARTIFACT_PATH=$IPA_PATH" >> $GITHUB_ENV
        else
          # Simulator build: needs to compress with tar, as GH actions drop execute file permission during packing to zip
          APP_PATH=$(find $IOS_SOURCE_DIR/build -name '*.app' -type d | head -1 )
          APP_DIR=$(dirname "$APP_PATH")
          APP_BASENAME=$(basename "$APP_PATH")

          ARTIFACT_PATH="$APP_DIR/app.tar.gz"
          tar -C "$APP_DIR" -czvf "$ARTIFACT_PATH" "$APP_BASENAME"

          echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Download and Unpack IPA
      if: ${{ env.ARTIFACT_URL && inputs.destination == 'device' && inputs.re-sign == 'true' && github.event_name == 'pull_request' }}
      run: |
        DOWNLOAD_OUTPUT=$(npx rnef remote-cache download --name ${{ env.ARTIFACT_NAME }} --json)
        IPA_PATH=$(echo "$DOWNLOAD_OUTPUT" | jq -r '.path')
        echo "ARTIFACT_PATH=$IPA_PATH" >> $GITHUB_ENV
      shell: bash

    - name: Download and Unpack APP
      if: ${{ env.ARTIFACT_URL && inputs.destination == 'simulator' && inputs.re-sign == 'true' && github.event_name == 'pull_request' }}
      run: |
        DOWNLOAD_OUTPUT=$(npx rnef remote-cache download --name ${{ env.ARTIFACT_NAME }} --json)
        APP_PATH=$(echo "$DOWNLOAD_OUTPUT" | jq -r '.path')
        APP_DIR=$(dirname "$APP_PATH")
        APP_BASENAME=$(basename "$APP_PATH")

        tar -C "$APP_DIR" -xzf "$APP_PATH"
        EXTRACTED_APP=$(find "$APP_DIR" -name "*.app" -type d | head -1)

        echo "ARTIFACT_PATH=$APP_PATH" >> $GITHUB_ENV
        echo "ARTIFACT_TAR_PATH=$EXTRACTED_APP" >> $GITHUB_ENV
      shell: bash

    - name: Re-sign IPA
      if: ${{ env.ARTIFACT_URL && inputs.destination == 'device' && inputs.re-sign == 'true' && github.event_name == 'pull_request' }}
      run: |
        npx rnef sign:ios ${{ env.ARTIFACT_PATH }} \
          --build-jsbundle \
          --identity ${{ env.IDENTITY }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Re-bundle APP
      if: ${{ env.ARTIFACT_URL && inputs.destination == 'simulator' && inputs.re-sign == 'true' && github.event_name == 'pull_request' }}
      run: |
        npx rnef sign:ios ${{ env.ARTIFACT_TAR_PATH }} \
          --build-jsbundle \
          --app
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Update Artifact Name for re-signed builds
      if: ${{ github.event_name == 'pull_request' && inputs.re-sign == 'true' }}
      run: |
        ARTIFACT_TRAITS="${{ inputs.destination }},${{ inputs.configuration }},${{ github.event.pull_request.number}}"
        ARTIFACT_TRAITS_HYPHENATED=$(echo "$ARTIFACT_TRAITS" | tr ',' '-')
        ARTIFACT_TRAITS_HYPHENATED_FINGERPRINT="${ARTIFACT_TRAITS_HYPHENATED}-${FINGERPRINT}"
        echo "ARTIFACT_NAME=rnef-ios-${ARTIFACT_TRAITS_HYPHENATED_FINGERPRINT}" >> $GITHUB_ENV
        echo "ARTIFACT_TRAITS=$ARTIFACT_TRAITS" >> $GITHUB_ENV
      shell: bash

    # Find artifact URL again before uploading, as other concurrent workflows could upload the same artifact
    - name: Find artifact URL again before uploading
      run: |
        OUTPUT=$(npx rnef remote-cache list --name ${{ env.ARTIFACT_NAME }} --json)
        if [ -z "$OUTPUT" ]; then
          echo "No artifact found"
        else
          echo "ARTIFACT_URL=$(echo "$OUTPUT" | jq -r '.url')" >> $GITHUB_ENV
          echo "ARTIFACT_ID=$(echo "$OUTPUT" | jq -r '.id')" >> $GITHUB_ENV
        fi
      shell: bash

    # Special case for GitHub, as it doesn't support uploading through the API
    - name: Upload Artifact to GitHub
      id: upload-artifact
      if: ${{ env.PROVIDER_NAME == 'GitHub' && (!env.ARTIFACT_URL || (inputs.re-sign == 'true' && github.event_name == 'pull_request')) }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_PATH }}
        if-no-files-found: error

    - name: Upload Artifact to Remote Cache for re-signed builds
      if: ${{ env.PROVIDER_NAME != 'GitHub' && (inputs.re-sign == 'true' && github.event_name == 'pull_request') }}
      run: |
        OUTPUT=$(npx rnef remote-cache upload --name ${{ env.ARTIFACT_NAME }} --binary-path ${{ env.ARTIFACT_PATH }} --json --verbose)
        echo "ARTIFACT_URL=$(echo "$OUTPUT" | jq -r '.url')" >> $GITHUB_ENV
      shell: bash

    - name: Upload Artifact to Remote Cache for regular builds
      if: ${{ env.PROVIDER_NAME != 'GitHub' && !env.ARTIFACT_URL }}
      run: |
        OUTPUT=$(npx rnef remote-cache upload --name ${{ env.ARTIFACT_NAME }} --json --verbose)
        echo "ARTIFACT_URL=$(echo "$OUTPUT" | jq -r '.url')" >> $GITHUB_ENV
      shell: bash

    - name: Delete Old Re-Signed Artifacts
      if: ${{ env.ARTIFACT_URL && inputs.re-sign == 'true' && github.event_name == 'pull_request' }}
      run: |
        npx rnef remote-cache delete --name ${{ env.ARTIFACT_NAME }} --all-but-latest --json
      shell: bash

    - name: Clean Up Code Signing (device builds only)
      if: ${{ !env.ARTIFACT_URL && inputs.destination == 'device' }}
      run: |
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security delete-keychain "$KEYCHAIN_PATH"

        PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
        PROFILE_PATH="$PROFILE_DIR/${{ inputs.provisioning-profile-name }}.mobileprovision"
        rm "$PROFILE_PATH"
      shell: bash

    - name: Cleanup Cache
      run: |
        rm -rf .rnef/cache/project.json
      shell: bash

    - name: Post Build
      if: ${{ github.event_name == 'pull_request' && inputs.comment-bot == 'true' }}
      uses: callstackincubator/ios/.github/actions/rnef-post-build@v2
      with:
        title: iOS ${{ inputs.configuration }} ${{ inputs.destination == 'simulator' && 'APP for simulators' || 'IPA for physical devices' }}
        artifact-url: ${{ steps.upload-artifact.outputs.artifact-url || env.ARTIFACT_URL }}
        github-token: ${{ inputs.github-token }}
